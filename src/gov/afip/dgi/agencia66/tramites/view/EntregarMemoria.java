/*
 * To change this license header, choose License Headers in Project Properties.
 * To change this template file, choose Tools | Templates
 * and open the template in the editor.
 */
package gov.afip.dgi.agencia66.tramites.view;

import com.itextpdf.text.DocumentException;
import gov.afip.dgi.agencia66.controller.ControladorFiscalJpaController;
import gov.afip.dgi.agencia66.controller.EntityMan;
import gov.afip.dgi.agencia66.controller.RetiroMemoriaJpaController;
import gov.afip.dgi.agencia66.model.Agentes;
import gov.afip.dgi.agencia66.model.ControladorFiscal;
import gov.afip.dgi.agencia66.model.ParCaracter;
import gov.afip.dgi.agencia66.model.RetiroMemoria;
import gov.afip.dgi.agencia66.tramites.controller.BuscarControladorFiscal;
import gov.afip.dgi.agencia66.tramites.controller.BuscarRetiroMemoria;
import gov.afip.dgi.agencia66.tramites.controller.LoaderDeInicio;
import gov.afip.dgi.agencia66.tramites.util.ImprimeActaAnexoCF;
import gov.afip.dgi.agencia66.util.FormateaSalidasTexto;
import java.awt.Color;
import java.awt.event.ItemEvent;
import java.io.IOException;
import java.util.ArrayList;
import java.util.Calendar;
import java.util.List;
import java.util.logging.Level;
import java.util.logging.Logger;
import javax.swing.JOptionPane;
import javax.swing.JTable;
import javax.swing.table.DefaultTableModel;

/**
 *
 * @author u84062
 */
public class EntregarMemoria extends javax.swing.JFrame {

    
    private final List<String> errores = new ArrayList<String>();
    private ControladorFiscal _cf;
    /**
     * Creates new form EntregarMemoria
     */
    public EntregarMemoria() {
        initComponents();
        manejarVisible(false);
        llenarPantallaDatos();
        
        cmbAgente.addItemListener(new java.awt.event.ItemListener() {
            public void itemStateChanged(java.awt.event.ItemEvent evt) {
                cmbAgenteItemStateChanged(evt);
            }
        });
    }

    /**
     * This method is called from within the constructor to initialize the form.
     * WARNING: Do NOT modify this code. The content of this method is always
     * regenerated by the Form Editor.
     */
    @SuppressWarnings("unchecked")
    // <editor-fold defaultstate="collapsed" desc="Generated Code">//GEN-BEGIN:initComponents
    private void initComponents() {

        pnlCabecera = new javax.swing.JPanel();
        lblTitulo = new javax.swing.JLabel();
        jLabel21 = new javax.swing.JLabel();
        jSeparator1 = new javax.swing.JSeparator();
        pnlConsulta = new javax.swing.JPanel();
        lCuit = new javax.swing.JLabel();
        txtCuit = new javax.swing.JTextField();
        btnBuscar = new javax.swing.JButton();
        jScrollPane1 = new javax.swing.JScrollPane();
        tblResultados = new javax.swing.JTable();
        btnProcesar = new javax.swing.JButton();
        lblCaracter = new javax.swing.JLabel();
        txtNombre = new javax.swing.JTextField();
        lblDireccion = new javax.swing.JLabel();
        lblTotal = new javax.swing.JLabel();
        lblDni = new javax.swing.JLabel();
        txtZInicial = new javax.swing.JTextField();
        lblNombre = new javax.swing.JLabel();
        txtUltTkt = new javax.swing.JTextField();
        lblBloqueo = new javax.swing.JLabel();
        lblActaEntrega = new javax.swing.JLabel();
        cmbCaracter = new javax.swing.JComboBox<>();
        cmbAgente = new javax.swing.JComboBox<>();
        txtDireccion = new javax.swing.JTextField();
        lblIva = new javax.swing.JLabel();
        txtActaEntrega = new javax.swing.JTextField();
        lblAgente = new javax.swing.JLabel();
        lblActa = new javax.swing.JLabel();
        txtMonto = new javax.swing.JTextField();
        txtLegajo = new javax.swing.JTextField();
        txtZfinal = new javax.swing.JTextField();
        lblLegajo = new javax.swing.JLabel();
        txtIva = new javax.swing.JTextField();
        txtDni = new javax.swing.JTextField();
        lblInicial = new javax.swing.JLabel();
        lblFinal = new javax.swing.JLabel();
        lblTicket = new javax.swing.JLabel();
        txtActaRetiro = new javax.swing.JTextField();
        txtBloqueos = new javax.swing.JTextField();
        pnlDatos = new javax.swing.JPanel();
        btnGenerar = new javax.swing.JButton();
        btnSalir = new javax.swing.JButton();
        btnLimpiar = new javax.swing.JButton();

        setDefaultCloseOperation(javax.swing.WindowConstants.EXIT_ON_CLOSE);

        lblTitulo.setFont(new java.awt.Font("Arial Black", 1, 14)); // NOI18N
        lblTitulo.setIcon(new javax.swing.ImageIcon(getClass().getResource("/gov/afip/dgi/agencia66/tramites/view/view/Entregar.jpg"))); // NOI18N
        lblTitulo.setText("ENTREGAR MEMORIAS RETIRADAS");

        jLabel21.setBackground(java.awt.Color.white);
        jLabel21.setIcon(new javax.swing.ImageIcon(getClass().getResource("/gov/afip/dgi/agencia66/tramites/view/afip.png"))); // NOI18N

        lCuit.setText("CUIT:");

        txtCuit.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                txtCuitActionPerformed(evt);
            }
        });

        btnBuscar.setText("Buscar");
        btnBuscar.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                btnBuscarActionPerformed(evt);
            }
        });

        tblResultados.setAutoCreateRowSorter(true);
        tblResultados.setModel(new javax.swing.table.DefaultTableModel(
            new Object [][] {

            },
            new String [] {

            }
        ));
        jScrollPane1.setViewportView(tblResultados);

        btnProcesar.setText("Procesar");
        btnProcesar.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                btnProcesarActionPerformed(evt);
            }
        });

        javax.swing.GroupLayout pnlConsultaLayout = new javax.swing.GroupLayout(pnlConsulta);
        pnlConsulta.setLayout(pnlConsultaLayout);
        pnlConsultaLayout.setHorizontalGroup(
            pnlConsultaLayout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGroup(pnlConsultaLayout.createSequentialGroup()
                .addContainerGap()
                .addGroup(pnlConsultaLayout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                    .addGroup(pnlConsultaLayout.createSequentialGroup()
                        .addComponent(lCuit)
                        .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.UNRELATED)
                        .addComponent(txtCuit, javax.swing.GroupLayout.PREFERRED_SIZE, 123, javax.swing.GroupLayout.PREFERRED_SIZE)
                        .addGap(18, 18, 18)
                        .addComponent(btnBuscar)
                        .addGap(0, 0, Short.MAX_VALUE))
                    .addComponent(jScrollPane1, javax.swing.GroupLayout.Alignment.TRAILING, javax.swing.GroupLayout.DEFAULT_SIZE, 658, Short.MAX_VALUE))
                .addContainerGap())
            .addGroup(javax.swing.GroupLayout.Alignment.TRAILING, pnlConsultaLayout.createSequentialGroup()
                .addContainerGap(javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE)
                .addComponent(btnProcesar)
                .addGap(19, 19, 19))
        );
        pnlConsultaLayout.setVerticalGroup(
            pnlConsultaLayout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGroup(pnlConsultaLayout.createSequentialGroup()
                .addGroup(pnlConsultaLayout.createParallelGroup(javax.swing.GroupLayout.Alignment.BASELINE)
                    .addComponent(lCuit)
                    .addComponent(txtCuit, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE)
                    .addComponent(btnBuscar))
                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                .addComponent(jScrollPane1, javax.swing.GroupLayout.PREFERRED_SIZE, 101, javax.swing.GroupLayout.PREFERRED_SIZE)
                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                .addComponent(btnProcesar)
                .addGap(0, 12, Short.MAX_VALUE))
        );

        lblCaracter.setText("Caracter");

        lblDireccion.setText("Direccion:");

        lblTotal.setText("Monto Total: $");

        lblDni.setText("DNI:");

        lblNombre.setText("Nombre de quien retira:");

        txtUltTkt.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                txtUltTktActionPerformed(evt);
            }
        });

        lblBloqueo.setText("Bloqueos:");

        lblActaEntrega.setText("Acta Entrega:");

        cmbCaracter.setModel(new javax.swing.DefaultComboBoxModel<>(new String[] { "Seleccione el caracter" }));

        cmbAgente.setModel(new javax.swing.DefaultComboBoxModel<>(new String[] { "Seleccione el agente" }));
        cmbAgente.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                cmbAgenteActionPerformed(evt);
            }
        });

        lblIva.setText("Monto IVA: $");

        lblAgente.setText("Agente:");

        lblActa.setText("Acta de retiro:");

        txtLegajo.setEditable(false);
        txtLegajo.setBackground(new java.awt.Color(204, 204, 204));

        lblLegajo.setText("Legajo:");

        lblInicial.setText("Z Inicial:");

        lblFinal.setText("Z Final:");

        lblTicket.setText("Ult Ticket:");

        txtActaRetiro.setEditable(false);
        txtActaRetiro.setBackground(new java.awt.Color(204, 204, 204));

        javax.swing.GroupLayout pnlCabeceraLayout = new javax.swing.GroupLayout(pnlCabecera);
        pnlCabecera.setLayout(pnlCabeceraLayout);
        pnlCabeceraLayout.setHorizontalGroup(
            pnlCabeceraLayout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGroup(pnlCabeceraLayout.createSequentialGroup()
                .addContainerGap()
                .addGroup(pnlCabeceraLayout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                    .addComponent(jSeparator1)
                    .addGroup(pnlCabeceraLayout.createSequentialGroup()
                        .addGap(18, 18, 18)
                        .addComponent(lblTitulo, javax.swing.GroupLayout.PREFERRED_SIZE, 336, javax.swing.GroupLayout.PREFERRED_SIZE)
                        .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED, javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE)
                        .addComponent(jLabel21, javax.swing.GroupLayout.PREFERRED_SIZE, 188, javax.swing.GroupLayout.PREFERRED_SIZE))
                    .addComponent(pnlConsulta, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE)
                    .addGroup(pnlCabeceraLayout.createSequentialGroup()
                        .addComponent(lblDireccion)
                        .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.UNRELATED)
                        .addComponent(txtDireccion)
                        .addGap(80, 80, 80))
                    .addGroup(pnlCabeceraLayout.createSequentialGroup()
                        .addGroup(pnlCabeceraLayout.createParallelGroup(javax.swing.GroupLayout.Alignment.TRAILING)
                            .addGroup(pnlCabeceraLayout.createSequentialGroup()
                                .addComponent(lblBloqueo)
                                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.UNRELATED)
                                .addComponent(txtBloqueos, javax.swing.GroupLayout.PREFERRED_SIZE, 29, javax.swing.GroupLayout.PREFERRED_SIZE)
                                .addGap(26, 26, 26)
                                .addComponent(lblActa)
                                .addGap(10, 10, 10)
                                .addComponent(txtActaRetiro, javax.swing.GroupLayout.PREFERRED_SIZE, 124, javax.swing.GroupLayout.PREFERRED_SIZE))
                            .addGroup(javax.swing.GroupLayout.Alignment.LEADING, pnlCabeceraLayout.createSequentialGroup()
                                .addComponent(lblTotal)
                                .addGap(18, 18, 18)
                                .addComponent(txtMonto, javax.swing.GroupLayout.PREFERRED_SIZE, 132, javax.swing.GroupLayout.PREFERRED_SIZE)
                                .addGap(33, 33, 33)
                                .addComponent(lblIva)))
                        .addGroup(pnlCabeceraLayout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                            .addGroup(pnlCabeceraLayout.createSequentialGroup()
                                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.UNRELATED)
                                .addComponent(txtIva, javax.swing.GroupLayout.PREFERRED_SIZE, 122, javax.swing.GroupLayout.PREFERRED_SIZE))
                            .addGroup(pnlCabeceraLayout.createSequentialGroup()
                                .addGap(30, 30, 30)
                                .addComponent(lblActaEntrega)
                                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.UNRELATED)
                                .addComponent(txtActaEntrega)
                                .addGap(35, 35, 35))))
                    .addGroup(pnlCabeceraLayout.createSequentialGroup()
                        .addGroup(pnlCabeceraLayout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                            .addGroup(pnlCabeceraLayout.createSequentialGroup()
                                .addComponent(lblInicial)
                                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.UNRELATED)
                                .addComponent(txtZInicial, javax.swing.GroupLayout.PREFERRED_SIZE, 75, javax.swing.GroupLayout.PREFERRED_SIZE)
                                .addGap(34, 34, 34)
                                .addGroup(pnlCabeceraLayout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                                    .addGroup(pnlCabeceraLayout.createSequentialGroup()
                                        .addGap(30, 30, 30)
                                        .addComponent(lblCaracter)
                                        .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.UNRELATED)
                                        .addComponent(cmbCaracter, javax.swing.GroupLayout.PREFERRED_SIZE, 157, javax.swing.GroupLayout.PREFERRED_SIZE))
                                    .addGroup(pnlCabeceraLayout.createSequentialGroup()
                                        .addComponent(lblFinal)
                                        .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.UNRELATED)
                                        .addComponent(txtUltTkt, javax.swing.GroupLayout.PREFERRED_SIZE, 76, javax.swing.GroupLayout.PREFERRED_SIZE)
                                        .addGap(43, 43, 43)
                                        .addComponent(lblTicket, javax.swing.GroupLayout.PREFERRED_SIZE, 56, javax.swing.GroupLayout.PREFERRED_SIZE)
                                        .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                                        .addComponent(txtZfinal, javax.swing.GroupLayout.PREFERRED_SIZE, 78, javax.swing.GroupLayout.PREFERRED_SIZE))))
                            .addGroup(pnlCabeceraLayout.createSequentialGroup()
                                .addComponent(lblDni)
                                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.UNRELATED)
                                .addComponent(txtDni, javax.swing.GroupLayout.PREFERRED_SIZE, 120, javax.swing.GroupLayout.PREFERRED_SIZE))
                            .addGroup(pnlCabeceraLayout.createParallelGroup(javax.swing.GroupLayout.Alignment.TRAILING, false)
                                .addGroup(javax.swing.GroupLayout.Alignment.LEADING, pnlCabeceraLayout.createSequentialGroup()
                                    .addComponent(lblAgente)
                                    .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                                    .addComponent(cmbAgente, javax.swing.GroupLayout.PREFERRED_SIZE, 226, javax.swing.GroupLayout.PREFERRED_SIZE)
                                    .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED, javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE)
                                    .addComponent(lblLegajo)
                                    .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.UNRELATED)
                                    .addComponent(txtLegajo, javax.swing.GroupLayout.PREFERRED_SIZE, 92, javax.swing.GroupLayout.PREFERRED_SIZE))
                                .addGroup(javax.swing.GroupLayout.Alignment.LEADING, pnlCabeceraLayout.createSequentialGroup()
                                    .addComponent(lblNombre)
                                    .addGap(18, 18, 18)
                                    .addComponent(txtNombre, javax.swing.GroupLayout.PREFERRED_SIZE, 333, javax.swing.GroupLayout.PREFERRED_SIZE))))
                        .addGap(0, 0, Short.MAX_VALUE)))
                .addContainerGap())
        );
        pnlCabeceraLayout.setVerticalGroup(
            pnlCabeceraLayout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGroup(pnlCabeceraLayout.createSequentialGroup()
                .addContainerGap(javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE)
                .addGroup(pnlCabeceraLayout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                    .addComponent(jLabel21)
                    .addComponent(lblTitulo, javax.swing.GroupLayout.PREFERRED_SIZE, 57, javax.swing.GroupLayout.PREFERRED_SIZE))
                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.UNRELATED)
                .addComponent(jSeparator1, javax.swing.GroupLayout.PREFERRED_SIZE, 10, javax.swing.GroupLayout.PREFERRED_SIZE)
                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                .addComponent(pnlConsulta, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE)
                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                .addGroup(pnlCabeceraLayout.createParallelGroup(javax.swing.GroupLayout.Alignment.BASELINE)
                    .addComponent(cmbAgente, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE)
                    .addComponent(lblAgente)
                    .addComponent(lblLegajo)
                    .addComponent(txtLegajo, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE))
                .addGap(18, 18, 18)
                .addGroup(pnlCabeceraLayout.createParallelGroup(javax.swing.GroupLayout.Alignment.BASELINE)
                    .addComponent(lblNombre)
                    .addComponent(txtNombre, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE))
                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.UNRELATED)
                .addGroup(pnlCabeceraLayout.createParallelGroup(javax.swing.GroupLayout.Alignment.BASELINE)
                    .addComponent(lblDireccion)
                    .addComponent(txtDireccion, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE))
                .addGap(18, 18, 18)
                .addGroup(pnlCabeceraLayout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                    .addComponent(lblDni)
                    .addGroup(pnlCabeceraLayout.createParallelGroup(javax.swing.GroupLayout.Alignment.BASELINE)
                        .addComponent(lblCaracter)
                        .addComponent(cmbCaracter, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE)
                        .addComponent(txtDni, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE)))
                .addGap(27, 27, 27)
                .addGroup(pnlCabeceraLayout.createParallelGroup(javax.swing.GroupLayout.Alignment.BASELINE)
                    .addComponent(txtZInicial, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE)
                    .addComponent(txtZfinal, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE)
                    .addComponent(lblInicial)
                    .addComponent(lblFinal)
                    .addComponent(lblTicket)
                    .addComponent(txtUltTkt, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE))
                .addGap(18, 18, 18)
                .addGroup(pnlCabeceraLayout.createParallelGroup(javax.swing.GroupLayout.Alignment.BASELINE)
                    .addComponent(lblTotal)
                    .addComponent(txtMonto, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE)
                    .addComponent(lblIva)
                    .addComponent(txtIva, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE))
                .addGap(18, 18, 18)
                .addGroup(pnlCabeceraLayout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                    .addGroup(pnlCabeceraLayout.createParallelGroup(javax.swing.GroupLayout.Alignment.BASELINE)
                        .addComponent(lblBloqueo)
                        .addComponent(lblActa)
                        .addComponent(txtActaRetiro, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE)
                        .addComponent(txtBloqueos, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE))
                    .addGroup(pnlCabeceraLayout.createParallelGroup(javax.swing.GroupLayout.Alignment.BASELINE)
                        .addComponent(lblActaEntrega)
                        .addComponent(txtActaEntrega, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE))))
        );

        btnGenerar.setText("Generar");
        btnGenerar.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                btnGenerarActionPerformed(evt);
            }
        });

        btnSalir.setBackground(java.awt.Color.orange);
        btnSalir.setFont(new java.awt.Font("Rod", 1, 11)); // NOI18N
        btnSalir.setForeground(new java.awt.Color(51, 51, 51));
        btnSalir.setText("Salir");
        btnSalir.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                btnSalirActionPerformed(evt);
            }
        });

        btnLimpiar.setText("Limpiar Pantalla");
        btnLimpiar.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                btnLimpiarActionPerformed(evt);
            }
        });

        javax.swing.GroupLayout pnlDatosLayout = new javax.swing.GroupLayout(pnlDatos);
        pnlDatos.setLayout(pnlDatosLayout);
        pnlDatosLayout.setHorizontalGroup(
            pnlDatosLayout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGroup(pnlDatosLayout.createSequentialGroup()
                .addGap(74, 74, 74)
                .addComponent(btnGenerar)
                .addGap(121, 121, 121)
                .addComponent(btnLimpiar)
                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED, 165, Short.MAX_VALUE)
                .addComponent(btnSalir)
                .addGap(87, 87, 87))
        );
        pnlDatosLayout.setVerticalGroup(
            pnlDatosLayout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGroup(javax.swing.GroupLayout.Alignment.TRAILING, pnlDatosLayout.createSequentialGroup()
                .addContainerGap(26, Short.MAX_VALUE)
                .addGroup(pnlDatosLayout.createParallelGroup(javax.swing.GroupLayout.Alignment.BASELINE)
                    .addComponent(btnGenerar)
                    .addComponent(btnSalir)
                    .addComponent(btnLimpiar)))
        );

        javax.swing.GroupLayout layout = new javax.swing.GroupLayout(getContentPane());
        getContentPane().setLayout(layout);
        layout.setHorizontalGroup(
            layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGroup(layout.createSequentialGroup()
                .addContainerGap()
                .addGroup(layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                    .addComponent(pnlDatos, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE)
                    .addComponent(pnlCabecera, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE)))
        );
        layout.setVerticalGroup(
            layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGroup(layout.createSequentialGroup()
                .addGap(29, 29, 29)
                .addComponent(pnlCabecera, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE)
                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                .addComponent(pnlDatos, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE)
                .addContainerGap())
        );

        pack();
    }// </editor-fold>//GEN-END:initComponents

    private void cmbAgenteActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_cmbAgenteActionPerformed
        
    }//GEN-LAST:event_cmbAgenteActionPerformed

    
    
    private void cmbAgenteItemStateChanged(java.awt.event.ItemEvent evt) {
        String agenteSelected;
        Agentes a_gente;
        if (evt.getStateChange() == ItemEvent.SELECTED) {
            agenteSelected = (String)cmbAgente.getSelectedItem();
            for(int i=0; i<listaAgentes.size(); i++) {
                a_gente = (Agentes) listaAgentes.get(i);
                if(agenteSelected.equals(a_gente.getNombre())){
                    txtLegajo.setText(a_gente.getLegajo());
                    break;
                }
                else { txtLegajo.setText(null);}
            }
        }
    }
    
    private void btnBuscarActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_btnBuscarActionPerformed
        if(txtCuit.getText().isEmpty() || txtCuit.getText().length() < 11  ) {
            JOptionPane.showMessageDialog(this, "Debe ingresar un numero de CUIT", "Ingrese los datos", JOptionPane.ERROR_MESSAGE );
        } else {
            buscaCasos(Double.parseDouble(txtCuit.getText()));
        }
    }//GEN-LAST:event_btnBuscarActionPerformed

    private void txtCuitActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_txtCuitActionPerformed
        // TODO add your handling code here:
    }//GEN-LAST:event_txtCuitActionPerformed

    private void txtUltTktActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_txtUltTktActionPerformed
        // TODO add your handling code here:
    }//GEN-LAST:event_txtUltTktActionPerformed

    private void btnGenerarActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_btnGenerarActionPerformed
        System.out.println("Para validar");
        
        if(validar()) {
            generaActa();
            JOptionPane.showMessageDialog(null, "Imprimiendo actas", "Imprimiendo...",JOptionPane.INFORMATION_MESSAGE );
            blanqueaPantalla();
            manejarVisible(false);
            borrarTabla();
         } else { mostrarErrores(); }
    }//GEN-LAST:event_btnGenerarActionPerformed

    private void manejarVisible(boolean valor) {
        txtActaEntrega.setVisible(valor);
        txtActaRetiro.setVisible(valor);
        txtBloqueos.setVisible(valor);
        txtDireccion.setVisible(valor);
        txtDni.setVisible(valor);
        txtIva.setVisible(valor);
        txtLegajo.setVisible(valor);
        txtMonto.setVisible(valor);
        txtNombre.setVisible(valor);
        txtUltTkt.setVisible(valor);
        txtZInicial.setVisible(valor);
        txtZfinal.setVisible(valor);
        
        cmbAgente.setVisible(valor);
        cmbCaracter.setVisible(valor);
        
        lblAgente.setVisible(valor);
        lblLegajo.setVisible(valor);
        lblNombre.setVisible(valor);
        lblDireccion.setVisible(valor);
        lblDni.setVisible(valor);
        lblInicial.setVisible(valor);
        lblFinal.setVisible(valor);
        lblTicket.setVisible(valor);
        lblTotal.setVisible(valor);
        lblIva.setVisible(valor);
        lblBloqueo.setVisible(valor);
        lblActa.setVisible(valor);
        lblActaEntrega.setVisible(valor);
        
        btnGenerar.setVisible(valor);
        //btnLimpiar.setVisible(valor);
        
        lblCaracter.setVisible(valor);
    }
    
    private void btnProcesarActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_btnProcesarActionPerformed
        
        /** Vuelvo a validar si hay CUIT ingresado */
        
        if(txtCuit.getText().isEmpty() || txtCuit.getText().length() < 11  ) {
            JOptionPane.showMessageDialog(this, "Debe ingresar un numero de CUIT", "Ingrese los datos", JOptionPane.ERROR_MESSAGE );
        } else {
            System.out.println("Seleccionado");
            int fila = tblResultados.getSelectedRow();
            
            if(fila == -1) {
                JOptionPane.showMessageDialog(this, "Debe seleccionar la solicitud", "Seleccione una solicitud", JOptionPane.ERROR_MESSAGE );
            } else {
                if(existeRM(fila)) {
                    JOptionPane.showMessageDialog(this, "Ya se proceso esta entrega de Memoria Fiscal", "Ya procesado...", JOptionPane.ERROR_MESSAGE );
                } else {
                    manejarVisible(true);
                    buscarDatosCF();
                }
            }
        }
    }//GEN-LAST:event_btnProcesarActionPerformed

    private void btnLimpiarActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_btnLimpiarActionPerformed
        manejarVisible(false);
        txtActaEntrega.setText("");
        txtActaRetiro.setText("");
        txtBloqueos.setText("");
        txtDireccion.setText("");
        txtDni.setText("");
        txtIva.setText("");
        txtLegajo.setText("");
        txtMonto.setText("");
        txtNombre.setText("");
        txtUltTkt.setText("");
        txtZInicial.setText("");
        txtZfinal.setText("");
        txtCuit.setText("");
        borrarTabla();
        blanqueaPantalla();
        cmbAgente.setSelectedIndex(0);
        cmbCaracter.setSelectedIndex(0);
    }//GEN-LAST:event_btnLimpiarActionPerformed

    private void btnSalirActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_btnSalirActionPerformed
        this.dispose();
    }//GEN-LAST:event_btnSalirActionPerformed

    /**
     * @param args the command line arguments
     */
    public static void main(String args[]) {
        /* Set the Nimbus look and feel */
        //<editor-fold defaultstate="collapsed" desc=" Look and feel setting code (optional) ">
        /* If Nimbus (introduced in Java SE 6) is not available, stay with the default look and feel.
         * For details see http://download.oracle.com/javase/tutorial/uiswing/lookandfeel/plaf.html 
         */
        try {
            for (javax.swing.UIManager.LookAndFeelInfo info : javax.swing.UIManager.getInstalledLookAndFeels()) {
                if ("Nimbus".equals(info.getName())) {
                    javax.swing.UIManager.setLookAndFeel(info.getClassName());
                    break;
                }
            }
        } catch (ClassNotFoundException ex) {
            java.util.logging.Logger.getLogger(EntregarMemoria.class.getName()).log(java.util.logging.Level.SEVERE, null, ex);
        } catch (InstantiationException ex) {
            java.util.logging.Logger.getLogger(EntregarMemoria.class.getName()).log(java.util.logging.Level.SEVERE, null, ex);
        } catch (IllegalAccessException ex) {
            java.util.logging.Logger.getLogger(EntregarMemoria.class.getName()).log(java.util.logging.Level.SEVERE, null, ex);
        } catch (javax.swing.UnsupportedLookAndFeelException ex) {
            java.util.logging.Logger.getLogger(EntregarMemoria.class.getName()).log(java.util.logging.Level.SEVERE, null, ex);
        }
        //</editor-fold>

        /* Create and display the form */
        java.awt.EventQueue.invokeLater(new Runnable() {
            public void run() {
                new EntregarMemoria().setVisible(true);
            }
        });
    }

    // Variables declaration - do not modify//GEN-BEGIN:variables
    private javax.swing.JButton btnBuscar;
    private javax.swing.JButton btnGenerar;
    private javax.swing.JButton btnLimpiar;
    private javax.swing.JButton btnProcesar;
    private javax.swing.JButton btnSalir;
    private javax.swing.JComboBox<String> cmbAgente;
    private javax.swing.JComboBox<String> cmbCaracter;
    private javax.swing.JLabel jLabel21;
    private javax.swing.JScrollPane jScrollPane1;
    private javax.swing.JSeparator jSeparator1;
    private javax.swing.JLabel lCuit;
    private javax.swing.JLabel lblActa;
    private javax.swing.JLabel lblActaEntrega;
    private javax.swing.JLabel lblAgente;
    private javax.swing.JLabel lblBloqueo;
    private javax.swing.JLabel lblCaracter;
    private javax.swing.JLabel lblDireccion;
    private javax.swing.JLabel lblDni;
    private javax.swing.JLabel lblFinal;
    private javax.swing.JLabel lblInicial;
    private javax.swing.JLabel lblIva;
    private javax.swing.JLabel lblLegajo;
    private javax.swing.JLabel lblNombre;
    private javax.swing.JLabel lblTicket;
    private javax.swing.JLabel lblTitulo;
    private javax.swing.JLabel lblTotal;
    private javax.swing.JPanel pnlCabecera;
    private javax.swing.JPanel pnlConsulta;
    private javax.swing.JPanel pnlDatos;
    private javax.swing.JTable tblResultados;
    private javax.swing.JTextField txtActaEntrega;
    private javax.swing.JTextField txtActaRetiro;
    private javax.swing.JTextField txtBloqueos;
    private javax.swing.JTextField txtCuit;
    private javax.swing.JTextField txtDireccion;
    private javax.swing.JTextField txtDni;
    private javax.swing.JTextField txtIva;
    private javax.swing.JTextField txtLegajo;
    private javax.swing.JTextField txtMonto;
    private javax.swing.JTextField txtNombre;
    private javax.swing.JTextField txtUltTkt;
    private javax.swing.JTextField txtZInicial;
    private javax.swing.JTextField txtZfinal;
    // End of variables declaration//GEN-END:variables


 List listaAgentes;   
 private List resultado;

public List getResultado() {
        return resultado;
    }

    public void setResultado(List resultado) {
        this.resultado = resultado;
    }
    
    @SuppressWarnings("empty-statement")
    private void mostarCasos() {
        System.out.println("En mostrar casos");
        
        DefaultTableModel modelo;
        
        
        String[] encabezado = {"id","Razon Social", "Solicitud", "Puesto Venta"};
        
        //modelo = new DefaultTableModel(encabezado,0);
        modelo = new DefaultTableModel(null, encabezado);
        String[] registro;
        
        System.out.println("Encontre:  " +getResultado().size());
         
        jScrollPane1.add(tblResultados);
        jScrollPane1.setVisible(true);
        
        if(resultado.size() < 1) {
            JOptionPane.showMessageDialog(this, "No se encontaron casos", "Sin resultados", JOptionPane.INFORMATION_MESSAGE);
        }else {
            for(int i=0; getResultado().size() > i; i++) {
                _cf = (ControladorFiscal) getResultado().get(i);
                modelo.insertRow(i, new Object[] {_cf.getId(),_cf.getRazonSocial(),_cf.getSolicitud(), _cf.getPuestoVenta() });
                this.tblResultados.setModel(modelo);
            }
            jScrollPane1.setViewportView(tblResultados);
        }
    }

    private void buscaCasos(double parseDouble) {
        
        BuscarControladorFiscal bcf;
        bcf = new BuscarControladorFiscal();
        List resultado;
        
        if(txtCuit.getText().isEmpty() ) {
          JOptionPane.showMessageDialog(this, "Debe ingresar un numero de CUIT", "Ingrese los datos", JOptionPane.ERROR_MESSAGE );
        } else {
            setResultado(bcf.findCFSinMemoria(Double.parseDouble(txtCuit.getText())));
            mostarCasos();
        }
          
    }

    private void borrarTabla() {
        DefaultTableModel modelo = (DefaultTableModel)tblResultados.getModel(); 
//        for (int i = 0; i <= tblResultados.getRowCount(); i++) {
//            System.out.println("Indice: " +i +" Ocurrencias: " +tblResultados.getRowCount());
//            modelo.removeRow(i); 
//        }
        modelo.setRowCount(0);
    }
    
    private boolean validar() {    
        errores.clear();
        blanqueaPantalla();
        
        if(txtCuit.getText().isEmpty() || txtCuit.getText().length() < 11  ) {
            errores.add("Debe ingresar un numero de CUIT válido");
            txtCuit.setBackground(Color.red);
        }
        if(txtActaEntrega.getText().isEmpty()) {
            errores.add("Debe ingresar el numero de Acta de Entrega de la memoria");
            txtActaEntrega.setBackground(Color.red);
        }
        if(txtBloqueos.getText().isEmpty()) {
            errores.add("Debe ingresar la cantidad de bloqueos desde el ticket recibido");
            txtBloqueos.setBackground(Color.red);
        }
        if(txtDireccion.getText().isEmpty()) {
            errores.add("Debe ingresar la dirección...");
            txtDireccion.setBackground(Color.red);
        }
        if(txtMonto.getText().isEmpty()) {
            System.out.println("Monto es: " +txtMonto.getText());
            errores.add("Debe ingresar el monto en $ desde el ticket recibido...");
            txtMonto.setBackground(Color.red);
        }
        
        if(txtIva.getText().isEmpty()) {
            errores.add("Debe ingresar el monto en $ de IVA desde el ticket recibido...");
            txtIva.setBackground(Color.red);
        }
        
        if(txtUltTkt.getText().isEmpty()) {
            errores.add("Debe ingresar el último ticket recibido...");
            txtUltTkt.setBackground(Color.red);
        }

        if(txtZInicial.getText().isEmpty()) {
            errores.add("Debe ingresar el último valor de la Z inicial desde el ticket recibido...");
            txtZInicial.setBackground(Color.red);
        }
        
        if(txtZfinal.getText().isEmpty()) {
            errores.add("Debe ingresar el último valor de la Z Final desde el ticket recibido...");
            txtZfinal.setBackground(Color.red);
        }
        
        int indice = cmbAgente.getSelectedIndex();
        if(indice == 0){errores.add("Debe seleccionar un Agente");}

        indice = cmbCaracter.getSelectedIndex();
        if(indice == 0){errores.add("Debe seleccionar un CARACTER de trámite");}
        
        
        if(errores.size() == 0) {
            return true;
        } else { return false; }
        
    }

    private void llenarPantallaDatos() {

         LoaderDeInicio ldi = new LoaderDeInicio();
        
        /**
         * Para cargar el combo de agentes
         */
        listaAgentes = ldi.getOperadores();
        Agentes agte = new Agentes();
                  
         for (int i=0; i < listaAgentes.size(); i++) {
             agte = (Agentes) listaAgentes.get(i);
             cmbAgente.addItem(agte.getNombre());
         }
         
         /**
          * Para cargar el combo de 
          */
         
         List listaCaracter = ldi.getCaracter();
         ParCaracter caracter = new ParCaracter();
         
         for(int j=0; j < listaCaracter.size(); j++) {
             caracter = (ParCaracter) listaCaracter.get(j);
             cmbCaracter.addItem(caracter.getCaracter());
         }
    }
    
     private void mostrarErrores() {
         JOptionPane.showMessageDialog(this, "Solucione los siguientes errores: " +mensajesDeError(), "Errores de Validación", JOptionPane.ERROR_MESSAGE );
     }
     
     private String mensajesDeError() {
        String erroresDeValidacion = "\n";
        for(int i = 0; errores.size() > i; i++) {
            erroresDeValidacion = erroresDeValidacion+"- "+errores.get(i)+"\n";
        }
        return erroresDeValidacion;
    }

    private void generaActa() {
        Calendar cal = Calendar.getInstance();
        int anio= cal.get(Calendar.YEAR);
        ImprimeActaAnexoCF imprime = new ImprimeActaAnexoCF();
        try {
            imprime.imprimeActaRetornoMemoria(_cf, creaObjeto(), anio);
        } catch (IOException ex) {
            Logger.getLogger(EntregarMemoria.class.getName()).log(Level.SEVERE, null, ex);
        } catch (DocumentException ex) {
            Logger.getLogger(EntregarMemoria.class.getName()).log(Level.SEVERE, null, ex);
        }
    }

    private void blanqueaPantalla() {
         
            txtCuit.setBackground(Color.white);
            txtActaEntrega.setBackground(Color.white);
            txtBloqueos.setBackground(Color.white);
            txtDireccion.setBackground(Color.YELLOW);
            txtMonto.setBackground(Color.white);
            txtIva.setBackground(Color.white);
            txtUltTkt.setBackground(Color.white);
            txtZInicial.setBackground(Color.white);
            txtZfinal.setBackground(Color.white);
    }

    private RetiroMemoria creaObjeto() {
        
        FormateaSalidasTexto fst = new FormateaSalidasTexto();
        Calendar cal = Calendar.getInstance();
        int anio= cal.get(Calendar.YEAR);
        int mes= cal.get(Calendar.MONTH);
        int dia= cal.get(Calendar.DATE);
        
        String fp = String.valueOf(anio)+String.format("%02d", mes)+String.format("%02d", dia);
        
        RetiroMemoria rm = new RetiroMemoria();
        
        rm.setIdControladorFiscal(_cf.getId());
        rm.setAgente((String)cmbAgente.getSelectedItem());
        rm.setCaracter((String)cmbCaracter.getSelectedItem());
        rm.setDni(txtDni.getText());
        System.out.println("Envio la fecha: " +fp);
        rm.setFechaProceso(fst.fecha2SqliteFecha(fp));
        rm.setRetira(txtNombre.getText());
        rm.setDireccion(txtDireccion.getText());
        rm.setLegajo(txtLegajo.getText());
        rm.setActa(txtActaEntrega.getText());
        
        /************************************
         * Actualizo el objeto Controlador Fiscal _cf con
         * los datos del ticket recibido
         */
        
        _cf.setZDesde(Integer.parseInt(txtZInicial.getText()));
        _cf.setZHasta(Integer.parseInt(txtZfinal.getText()));
        _cf.setVentaingresado(Double.parseDouble(txtMonto.getText()));
        _cf.setIvaingresado(Double.parseDouble(txtIva.getText()));
        _cf.setUltimocingresado(Integer.parseInt(txtUltTkt.getText()));
        _cf.setBloqueos(Integer.parseInt(txtBloqueos.getText()));
        
        persiste(rm);
        
        return rm;
    }

    private void persiste(RetiroMemoria _rm) {
        int opcion;
        try {
            opcion = JOptionPane.showConfirmDialog(null, "¿Realmente deseas Grabar...?", "PersisteRM?", JOptionPane.YES_NO_OPTION);

                if (opcion == 0) { 
                  RetiroMemoriaJpaController jpaRM = new RetiroMemoriaJpaController(EntityMan.getInstance());
                  jpaRM.create(_rm);
                  ControladorFiscalJpaController jpsCF = new ControladorFiscalJpaController(EntityMan.getInstance());
                  jpsCF.edit(_cf);
                } else {
                   Logger.getLogger(EntregarMemoria.class.getName()).log(Level.INFO, "Decidio no grabar","Sin grabar Retiro de Memoria");
                }

        } catch (Exception ex) {
            System.out.println("Error al persistir");
            Logger.getLogger(EntregarMemoria.class.getName()).log(Level.SEVERE, null, ex);
            JOptionPane.showMessageDialog(null, "No pudo grabar el ID : " +_rm.getIdControladorFiscal()+" de quien retira: " +_rm.getRetira() +" -- "+ex.getMessage());
                
            }
    }

    private void buscarDatosCF() {
         txtActaRetiro.setText(_cf.getActa());
         txtNombre.setText(_cf.getNombre());
         txtNombre.setBackground(Color.yellow);
         txtDireccion.setText(_cf.getDireccion());
         txtDireccion.setBackground(Color.YELLOW);
         txtDni.setText(_cf.getDocumento());
         txtDni.setBackground(Color.yellow);
    }

    private boolean existeRM(int fila) {
        BuscarRetiroMemoria brm = new BuscarRetiroMemoria();
        DefaultTableModel modelo = (DefaultTableModel)tblResultados.getModel();
        int idCF = (int) modelo.getValueAt(fila, 0);
        System.out.println("El id es: " +idCF);
        return brm.existeRM(idCF);
    }

} /** Fin de la clase */
